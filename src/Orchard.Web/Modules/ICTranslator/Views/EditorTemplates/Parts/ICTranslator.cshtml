@model ICTranslator.Models.ICTranslatorPart
@{ 
    Script.Require("TinyMce");
}
@using (Script.Foot())
{
    <script type="text/javascript">
//<![CDATA[
    tinyMCE.init({
        theme: "advanced",
        mode: "specific_textareas",
        editor_selector: "ICTranslatorhtml",
        plugins: "fullscreen,autoresize,searchreplace,addmedia",
        theme_advanced_toolbar_location: "top",
        theme_advanced_toolbar_align: "left",
        theme_advanced_buttons1: "search,replace,|,cut,copy,paste,|,undo,redo,|,image,addmedia,|,link,unlink,charmap,emoticon,codeblock,|,bold,italic,|,numlist,bullist,formatselect,|,code,fullscreen",
        theme_advanced_buttons2: "",
        theme_advanced_buttons3: "",
        convert_urls: false,
        addmedia_action: "@Url.Action("AddFromClient", "Admin", new { area = "Orchard.Media" })",
        addmedia_path: "",
        request_verification_token: "@Html.AntiForgeryTokenValueOrchard()",
        extended_valid_elements: "canvas[id|width|height],script[src|type]," +
            "object[classid|codebase|width|height|align|name|id],param[name|value],embed[quality|type|pluginspage|width|height|src|align]," +
            "iframe[src|frameborder|width|height|scrolling|name|id]," +
            "video[src|audio|autoplay|controls|width|height|loop|preload|poster],audio[src|autoplay|loop|controls|preload],source[id|src|type]"
    });
//]]>
    </script>
}
@{
    String[] codes = { "ar", "ca", "zh-chs", "zh-cht", "da", "de", "en", "fi", "fr", "it", "ja", "ko", "nl", "no", "pl", "pt", "ru", "es", "sv" };
    String[] text = { "Arabic", "Catalan", "Chinese Simplified", "Chinese Traditional", "Danish", "German", "English", "Finnish", "French", "Italian", "Japanese", "Korean", "Dutch", "Norwegian", "Polish", "Portuguese", "Russian", "Spanish", "Swedish" };
    List<SelectListItem> langList = new List<SelectListItem>();
    for (int i = 0; i < codes.Length; i++)
    {
        langList.Add(new SelectListItem
        {
            Text = text[i],
            Value = codes[i]
        });
    }
}
<fieldset>
    <div class="editor-label">
        Translation:
    </div>
    <div class="editor-field">
        <span>
            From:
            @Html.DropDownListFor(model => model.FromLanguage, new SelectList(langList, "Value", "Text", "en"))
            @Html.ValidationMessageFor(model => model.ToLanguage)
        </span>
        <span>
            To:
            @Html.DropDownListFor(model => model.ToLanguage, new SelectList(langList, "Value", "Text", "en"))
            @Html.ValidationMessageFor(model => model.ToLanguage)
        </span>
    </div>
</fieldset>
<fieldset>
    @Html.TextAreaFor(model => model.TranslateText, 25, 80, new { @class = "ICTranslatorhtml" })
</fieldset>
