@using MnLab.PdfVisualDesign
@using MnLab.PdfVisualDesign.ViewModels
@using MnLab.PdfVisualDesign.Binding
@using MnLab.PdfVisualDesign.Binding.Elements

@model ValueBindGridViewModel
@{
    /**/

    Script.Require("handsontable").AtHead();
    Style.Require("handsontable").AtHead();

    Script.Require("AngularJs_Full").AtHead();


    Script.Require("common").AtHead();
    Script.Require("handsontable_custom").AtHead();

    //manifest.DefineScript("Layouts.Lib").SetDependencies("jQuery", "AngularJs_Full", "Underscore");


    var design = Model.DesignData;
    var BindingDefSources = Model.BindingDefSources?.SelectMany(x => x);

    var ValueMaps = Model.ValueMaps;


    var bs1 = BindingDefSources?.Select(x => new {
        x.ContentPartName,
        x.MemberExpression,
        x.Key,
        BindType = "DisplayName",
    });
    var bs2 = BindingDefSources?.Select(x => new {
        x.ContentPartName,
        x.MemberExpression,
        x.Key,
        BindType = "Value",
    });

    var bs = bs1.Concat(bs2);//.Where(x=>x.ContentPartName!=null);
}

@*<script src="https://cdn.jsdelivr.net/npm/handsontable@7.0.0/dist/handsontable.full.min.js"></script>
    <link type="text/css" rel="stylesheet" href="https://cdn.jsdelivr.net/npm/handsontable@7.0.0/dist/handsontable.full.min.css">*@


@{
    var AllCellValues = design?.AllCellValues;
    var mergedCells = design?.MergedCells;
    var uniqueId = Guid.NewGuid().ToString("N");

    var gridTypes = new[] {
        new SelectListItem() {Text = T("Please choose").Text}
    }
        .Concat(new[] {"Table", "ULList", "OLList"}
            .Select(x => new SelectListItem() {Value = x, Text = x, Selected = x == design?.GridType}));
}

<fieldset>
    <legend>Grid Type Setting</legend>
    @*<input name="" />*@
    @Html.DropDownListFor(x => x.DesignData.GridType, gridTypes)
    @Html.TextBoxFor(x => x.DesignData.DisplayType)
</fieldset>

<div id="handsontable-@(uniqueId)" class="hot handsontable htRowHeaders htColumnHeaders"></div>


<script>
    (function() {

        var uniqueId = ['@(uniqueId)'][0];
    var ValueMaps = [
                @(Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(ValueMaps, Newtonsoft.Json.Formatting.Indented)))
            ][0];
        var AllCellValues = [
            @(Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(AllCellValues, Newtonsoft.Json.Formatting.Indented)))
        ][0];
        var mergedCells = [
            @(Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(mergedCells, Newtonsoft.Json.Formatting.Indented)))
        ][0];


        var gridApp = angular.module('ValueBindGrid_' + uniqueId, []);

        var scope;
        var ngController = gridApp.controller('ValueBindGridController_' + uniqueId,
            function PhoneListController($scope) {
                scope = $scope;

                $scope.AllCellValues_JSON = AllCellValues && JSON.stringify(AllCellValues);
                $scope.mergedCells_JSON = mergedCells && JSON.stringify(mergedCells);

                $scope.appplyTableChange = function(table) {
                    var mc = table.getPlugin('mergeCells');
                    var mergedCellsCollection = mc.mergedCellsCollection;
                    var mergedCellsNew = mergedCellsCollection && mergedCellsCollection.mergedCells;
                    // console.log("mergedCellsCollection", mc);
                    //debugger
                    scope.$apply(function() {
                        //scope.mergedCells = mergedCellsNew;

                        scope.mergedCells_JSON = mergedCellsNew && JSON.stringify(mergedCellsNew);

                        //// 源数据？
                        // hot.getSourceData();

                        // 用户编辑修改后的数据？
                        var newData = table.getData();
                        if (newData) {
                            // debugger
                            for (var i = 0; i < newData.length; i++) {
                                var array = newData[i];
                                if (array) {
                                    for (var j = 0; j < array.length; j++) {
                                        var d = array[j];
                                        array[j] = handsontableHelper.parseCellValueIfIsJson(d);
                                    }
                                }
                            }
                        }

                       // console.info('newData', newData);
                        scope.AllCellValues_JSON = newData && JSON.stringify(newData);
                    });

                }
                //$scope.AllCellValues = AllCellValues;
                //$scope.mergedCells = mergedCells;
            });

        var container = document.getElementById('handsontable-@(uniqueId)');


        //var manufacturerData = [
        //        { name: 'BMW', country: 'Germany', owner: 'Bayerische Motoren Werke AG' },
        //        { name: 'Chrysler', country: 'USA', owner: 'Chrysler Group LLC' },
        //        { name: 'Nissan', country: 'Japan', owner: 'Nissan Motor Company Ltd' },
        //        { name: 'Suzuki', country: 'Japan', owner: 'Suzuki Motor Corporation' },
        //        { name: 'Toyota', country: 'Japan', owner: 'Toyota Motor Corporation' },
        //        { name: 'Volvo', country: 'Sweden', owner: 'Zhejiang Geely Holding Group' }
        //];

        /*
        [
        {"ContentPartName":"Page","MemberExpression":"Choice1","DefaultValue":null,"Description":null,"Remark":null,"Key":"Page.Choice1"}
        ],
        */

        //var data = Handsontable.helper.createSpreadsheetData(10, 10);

        var manufacturerData = [@(Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(bs)))][0];


        var columnDef = {
            // renderer: Handsontable.renderers.AutocompleteRenderer,
            renderer: handsontableHelper.createRender(null, ValueMaps, Handsontable.renderers.AutocompleteRenderer),
            type: 'handsontable',
            handsontable: {
                search: true,

                // https://handsontable.com/docs/7.0.0/demo-hiding-columns.html
                //columns: [0, 1],
                //columns: ['ContentPartName','MemberExpression'],
                //indicators: true,
                columns: [
                    { data: 'BindType' },
                    { data: 'ContentPartName' },
                    { data: 'MemberExpression' }
                ],
                colHeaders: ['Bind Type', 'Part Type', 'Member Name'],
                autoColumnSize: true,
                data: manufacturerData,
                /*
                // https://github.com/handsontable/handsontable/issues/865
                renderer:function (instance, td, row, col, prop, value, cellProperties) {
            if(value != null){
            var escaped = Handsontable.helper.stringify(value);
                $(td).empty().append(value['ContentPartName']); //empty is needed because you are rendering to an existing cell
            }
            return td;
        },
                */
                getValue: function() {
                    var selection = this.getSelectedLast();
                    // Get the row's data object, object is from BindingDefSources
                    var obj = this.getSourceDataAtRow(selection[0]);
                    /*
string ContentPartName { get; set; }
string MemberExpression { get; set; }
*/
                    var ret = handsontableHelper.wrapCellValueJson(obj);
                    console.log('getValue',ret);
                    return ret;
                    //return 'JSON::'+JSON.stringify(obj);
                    //return obj.ContentPartName + '.' + obj.MemberExpression;

                    // the value only accept plain type
                    //return obj.Key;
                    //return obj;
                }
            }
        };

        var tableCfg = {
            licenseKey: 'non-commercial-and-evaluation',
            //afterGetColHeader: function (col, TH) {

            //   // debugger

            //    // nothing for first column
            //    if (col == -1) {
            //        return;
            //    }
            //    var instance = this;

            //    // create input element
            //    var input = document.createElement('input');
            //    input.type = 'text';
            //    input.value = TH.firstChild.textContent;

            //    TH.appendChild(input);

            //    $(input).change(function (e) {
            //        debugger
            //        var headers = instance.getColHeader();
            //        headers[col] = input.value;
            //        instance.updateSettings({
            //            colHeaders: headers
            //        });
            //    });

            //    TH.style.position = 'relative';
            //    TH.firstChild.style.display = 'none';
            //},


               /*
                *
                * https://stackoverflow.com/questions/18348437/how-do-i-edit-the-header-text-of-a-handsontable
                *
                * 
https://stackoverflow.com/questions/32212596/prevent-handsontable-cells-from-being-selected-on-column-header-click
*/

            ///*
            afterOnCellMouseDown: function (event, coords, th) {
               // debugger
                if (coords.row === -1 || coords.col === -1) {
                    let instance = this,
                        isCol = coords.row === -1,
                        input = document.createElement('input'),
                        rect = th.getBoundingClientRect(),
                        addListeners = (events, headers, index) => {
                            events.split(' ').forEach(e => {
                                input.addEventListener(e, () => {
                                    headers[index] = input.value;
                                    instance.updateSettings(isCol ? {
                                        colHeaders: headers
                                    } : {
                                            rowHeaders: headers
                                        });
                                    setTimeout(() => {
                                        if (input.parentNode)
                                            input.parentNode.removeChild(input)
                                    });
                                })
                            })
                        },
                        appendInput = () => {
                            input.setAttribute('type', 'text');
                            input.style.cssText = '' +
                                'position:absolute;' +
                                'left:' + rect.left + 'px;' +
                                'top:' + rect.top + 'px;' +
                                'width:' + (rect.width - 4) + 'px;' +
                                'height:' + (rect.height - 4) + 'px;' +
                                'z-index:1060;';
                            document.body.appendChild(input);
                        };
                    input.value = th.querySelector(
                        isCol ? '.colHeader' : '.rowHeader'
                    ).innerText;
                    appendInput();
                    setTimeout(() => {
                        input.select();
                        addListeners('change blur', instance[
                            isCol ? 'getColHeader' : 'getRowHeader'
                        ](), coords[isCol ? 'col' : 'row']);
                    });
                }
            },
            //*/

            //data: AllCellValues || Handsontable.helper.createSpreadsheetData(5, 2),
            data: AllCellValues,
            //  colWidths: [47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47],
            rowHeaders: true,
            colHeaders: true,
            contextMenu: true,
            allowInsertColumn: true,
            allowInsertRow: true,
            colHeaders: ['Data Member (First Column)', '', 'Data Member (Second Column)', ''],
            columns: [columnDef, columnDef, columnDef, columnDef],
            mergeCells: mergedCells || [],
            //mergeCells: [
            //    { row: 1, col: 1, rowspan: 3, colspan: 3 },
            //    { row: 3, col: 4, rowspan: 2, colspan: 2 },
            //    { row: 5, col: 6, rowspan: 3, colspan: 3 }
            //],
            //afterMergeCells: function (range, parent, auto) {
            //    //    debugger
            //    console.log("afterMergeCells", range, parent, auto);

            //    scope.appplyTableChange(girdTable);
            //}
        };

        //v https://handsontable.com/docs/7.0.0/tutorial-using-callbacks.html
        //var hooks = ['afterChange', 'afterRemoveRow', 'afterRemoveCol', 'afterMergeCells',' afterUnmergeCells'];

        //['']
        var hooks = Handsontable.hooks.getRegistered()
            .filter(x => x.indexOf('Mouse') != -1 || x.indexOf('Scroll') != -1);

        var girdTable;
        hooks.forEach(function(hook) {
           // console.log("hook", arguments);
            var exists = tableCfg['afterOnCellMouseDown'];
            tableCfg[hook] = function () {
                //debugger
                if (exists) exists.apply(this, arguments);
                if (scope) {
                    scope.appplyTableChange(girdTable);
                }
            }
        });

        girdTable = new Handsontable(container, tableCfg);
        girdTable.hot = girdTable;

    })();
</script>


<div ng-app="ValueBindGrid_@(uniqueId)">

    <div ng-controller="ValueBindGridController_@(uniqueId)">
        <input name="@Html.NameFor(x => x.DesignData.AllCellValues)" ng-model="AllCellValues_JSON"/>
        <input name="@Html.NameFor(x => x.DesignData.MergedCells)" ng-model="mergedCells_JSON"/>
    </div>
</div>


@using (Script.Foot()) {
    <script type="text/javascript">
        $(function() {


        });
    </script>
}