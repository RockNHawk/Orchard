@using MnLab.PdfVisualDesign
@using MnLab.PdfVisualDesign.ViewModels
@using MnLab.PdfVisualDesign.Binding
@using MnLab.PdfVisualDesign.Binding.Elements

@model ValueBindGridViewModel
@{
    /**/

    Script.Require("handsontable").AtHead();
    Style.Require("handsontable").AtHead();
    Script.Require("inputclassEnhance").AtHead();
    Script.Require("AngularJs_Full").AtHead();

    //Style.Require("table").AtHead();
    Script.Require("common").AtHead();
    Script.Require("handsontable_custom").AtHead();
    //Style.Require("tbale").AtHead();
    //manifest.DefineScript("Layouts.Lib").SetDependencies("jQuery", "AngularJs_Full", "Underscore");


    var design = Model.DesignData;
    var BindingDefSources = Model.BindingDefSources?.SelectMany(x => x);

    var ValueMaps = Model.ValueMaps;


    var bs1 = BindingDefSources?.Select(x => new
    {
        x.ContentPartName,
        x.MemberExpression,
        x.Key,
        x.DisplayName,
      //  DisplayName = T(x.Key).Text,
        BindType = "DisplayName",
    });
    var bs2 = BindingDefSources?.Select(x => new
    {
        x.ContentPartName,
        x.MemberExpression,
        x.Key,
            x.DisplayName,
      //  DisplayName = T(x.Key).Text,
        BindType = "Value",
    });

    var bs = bs1.Concat(bs2);//.Where(x=>x.ContentPartName!=null);
}

@*<script src="https://cdn.jsdelivr.net/npm/handsontable@7.0.0/dist/handsontable.full.min.js"></script>
    <link type="text/css" rel="stylesheet" href="https://cdn.jsdelivr.net/npm/handsontable@7.0.0/dist/handsontable.full.min.css">*@


@{
    var AllCellValues = design?.AllCellValues;
    var mergedCells = design?.MergedCells;
    var columnHeaderTexts = design?.HeaderTexts;

    var uniqueId = Guid.NewGuid().ToString("N");

    var gridTypes = new[] {
        new SelectListItem() {Text = T("Please choose").Text}
    }
        .Concat(new[] { "Table", "ULList", "OLList" }
            .Select(x => new SelectListItem() { Value = x, Text = T(x).Text, Selected = x == design?.GridType }));
}

<div ng-app="ValueBindGrid_@(uniqueId)">
    <div ng-controller="ValueBindGridController_@(uniqueId)">
        <button type="button" ng-click="switchMode()">@T("switch to") {{mode=='ValueEdit'?'BindingEdit':'ValueEdit'}}</button>
        <p>@T("Current in template binding edit mode")</p>

        @*GridType:@(design)
        GridType:@(design?.GridType)*@
        <fieldset>
            <legend>@("Grid Type Setting")</legend>
            @*<input name="" />*@
            @Html.DropDownListFor(x => x.DesignData.GridType, gridTypes)
            @Html.TextBoxFor(x => x.DesignData.DisplayType)
        </fieldset>


        @*{{mode}}*@
        <div ng-show="mode=='BindingEdit'" id="handsontable-bindingedit-@(uniqueId)" class="hot handsontable htRowHeaders htColumnHeaders"></div>

        <div ng-show="mode=='ValueEdit'" id="handsontable-valueedit-@(uniqueId)" class="hot handsontable htRowHeaders htColumnHeaders">@T("ValueEdit")</div>

        @*<input style="width:100%" name="@(Html.NameFor(x => x.DesignData.HeaderTexts))_JSON" ng-model="columnHeaderTexts_JSON" />
        <textarea name="@(Html.NameFor(x => x.DesignData.AllCellValues))_JSON" ng-model="allCellValues_JSON"></textarea>
        <textarea name="@(Html.NameFor(x => x.DesignData.MergedCells))_JSON" ng-model="mergedCells_JSON"></textarea>*@

        <fieldset>
            <legend>columnHeaderTexts_JSON</legend>
            <code>{{columnHeaderTexts_JSON}}</code>
        </fieldset>

        <fieldset>
            <legend>allCellValues_JSON</legend>
            <code>{{allCellValues_JSON}}</code>
        </fieldset>

        <fieldset>
            <legend>mergedCells_JSON</legend>
            <code>{{mergedCells_JSON}}</code>
        </fieldset>

        @*  if input  type set to hidden ,angular  could not sync the value *@
        <input type="text" name="@(Html.NameFor(x => x.DesignData.HeaderTexts))_JSON" ng-model="columnHeaderTexts_JSON" />
        <input type="text" name="@(Html.NameFor(x => x.DesignData.AllCellValues))_JSON" ng-model="allCellValues_JSON" />
        <input type="text" name="@(Html.NameFor(x => x.DesignData.MergedCells))_JSON" ng-model="mergedCells_JSON" />


    </div>
</div>


<script>
    (function() {

    var valueMaps = [
                @(Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(ValueMaps, Newtonsoft.Json.Formatting.Indented)))
            ][0];
        var allCellValues = [
            @(Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(AllCellValues, Newtonsoft.Json.Formatting.Indented)))
        ][0];
        var mergedCells = [
            @(Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(mergedCells, Newtonsoft.Json.Formatting.Indented)))
        ][0];

          var columnHeaderTexts = [
                @(Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(columnHeaderTexts, Newtonsoft.Json.Formatting.Indented)))
            ][0]||[];


        //var manufacturerData = [
        //        { name: 'BMW', country: 'Germany', owner: 'Bayerische Motoren Werke AG' },
        //        { name: 'Chrysler', country: 'USA', owner: 'Chrysler Group LLC' },
        //        { name: 'Nissan', country: 'Japan', owner: 'Nissan Motor Company Ltd' },
        //        { name: 'Suzuki', country: 'Japan', owner: 'Suzuki Motor Corporation' },
        //        { name: 'Toyota', country: 'Japan', owner: 'Toyota Motor Corporation' },
        //        { name: 'Volvo', country: 'Sweden', owner: 'Zhejiang Geely Holding Group' }
        //];

        /*
        [
        {"ContentPartName":"Page","MemberExpression":"Choice1","DefaultValue":null,"Description":null,"Remark":null,"Key":"Page.Choice1"}
        ],
        */

        //var data = Handsontable.helper.createSpreadsheetData(10, 10);

        var cellDropdownData = [@(Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(bs)))][0];

        var uniqueId = ['@(uniqueId)'][0];


        var handsontableHelper = new HandsontableCustomHelper();
        handsontableHelper.init( {
            uniqueId,allCellValues, valueMaps,mergedCells ,columnHeaderTexts,cellDropdownData
        });

        var container = document.getElementById('handsontable-bindingedit-@(uniqueId)');
        var valueEditContainer = document.getElementById('handsontable-valueedit-@(uniqueId)');
       // var girdTable = handsontableHelper.createDesignTable(container,uniqueId,AllCellValues, ValueMaps,mergedCells ,manufacturerData,headerTexts);
        var girdTable = handsontableHelper.createEditTable(container,valueEditContainer);

        //handsontableHelper.valueEditTableContainer = valueEditContainer;

      //  girdTable.hot = girdTable;

    })();
</script>

@using (Script.Foot())
{
    <script type="text/javascript">
        $(function () {


        });
    </script>
}